#include <stdio.h>
#include <stdint.h>
#include "Common.h"
#include "DMA.h"


int dmaGetStatus(DmaRegs *dma, int stream, int flags){

	int numToShifts=0;
	int val = 0;

	if(stream <= 3){
		switch(stream){
			case 0 : numToShifts = 0;
			break;
			case 1 : numToShifts = 6;
			break;
			case 2 : numToShifts = 16;
			break;
			case 3 : numToShifts = 22;
			break;
		}

		val = flags << numToShifts;

		if(dma->Lisr & val){
			return 1;
		}
		else
		{
			return 0;
		}
	}
	else{
		switch(stream){
			case 4 : numToShifts = 0;
			break;
			case 5 : numToShifts = 6;
			break;
			case 6 : numToShifts = 16;
			break;
			case 7 : numToShifts = 22;
			break;
		}

		val =  flags << numToShifts;

		if(dma->Hisr & val){
			return 1;
		}
		else
		{
			return 0;
		}
	}

}


void dmaCLearStatus(DmaRegs *dma, int stream, int flags){

	int numToShifts=0;
	int val = 0;

	if(stream <= 3){
		switch(stream){
			case 0 : numToShifts = 0;
			break;
			case 1 : numToShifts = 6;
			break;
			case 2 : numToShifts = 16;
			break;
			case 3 : numToShifts = 22;
			break;
		}

		val = ~(flags << numToShifts);

		dma->Lifcr = dma->Lifcr & val;
	}
	else{
		switch(stream){
			case 4 : numToShifts = 0;
			break;
			case 5 : numToShifts = 6;
			break;
			case 6 : numToShifts = 16;
			break;
			case 7 : numToShifts = 22;
			break;
		}

		val =  ~(flags << numToShifts);

		dma->Hifcr = dma->Hifcr & val;
	}

}


void dmaStreamConfigure(DmaRegs *dma, int stream, int configuration){
	//(dma->S[stream]).Cr &= ~(configuration);
	int *value;
	value = &(dma->S[stream].Cr);
	(dma->S[stream]).Cr = configuration;

}

void dmaStreamConfigureOnly(DmaRegs *dma, int stream, int mask, int configuration){
	dma->S[stream].Cr &= ~mask;
	dma->S[stream].Cr |= configuration;

}




